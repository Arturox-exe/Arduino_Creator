//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IoTModelHasArduino
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8f4bd1d7-3a92-4162-a383-23a1f720be22")]
	public partial class IoTModelHasArduino : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTModelHasArduino domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f4bd1d7, 0x3a92, 0x4162, 0xa3, 0x83, 0x23, 0xa1, 0xf7, 0x20, 0xbe, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTModelHasArduino link in the same Partition as the given IoTModel
		/// </summary>
		/// <param name="source">IoTModel to use as the source of the relationship.</param>
		/// <param name="target">Arduino to use as the target of the relationship.</param>
		public IoTModelHasArduino(IoTModel source, Arduino target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTModelHasArduino.IoTModelDomainRoleId, source), new DslModeling::RoleAssignment(IoTModelHasArduino.ArduinoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasArduino(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasArduino(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasArduino(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasArduino(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel domain role code
		
		/// <summary>
		/// IoTModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTModelDomainRoleId = new global::System.Guid(0x3879624e, 0x0206, 0x473a, 0x9f, 0x60, 0x30, 0x43, 0x74, 0x45, 0x30, 0xe8);
		
		/// <summary>
		/// DomainRole IoTModel
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModel
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/IoTModel.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/IoTModel.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Arduino", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/IoTModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3879624e-0206-473a-9f60-3043744530e8")]
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTModel of a Arduino
		/// <summary>
		/// Gets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTModel GetIoTModel(Arduino element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ArduinoDomainRoleId) as IoTModel;
		}
		
		/// <summary>
		/// Sets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTModel(Arduino element, IoTModel newIoTModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ArduinoDomainRoleId, newIoTModel);
		}
		#endregion
		#region Arduino domain role code
		
		/// <summary>
		/// Arduino domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArduinoDomainRoleId = new global::System.Guid(0x766da60d, 0x6afd, 0x4696, 0x96, 0x42, 0xcc, 0x42, 0x73, 0x93, 0x7e, 0x49);
		
		/// <summary>
		/// DomainRole Arduino
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.Arduino
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/Arduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/Arduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTModel", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino/Arduino.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("766da60d-6afd-4696-9642-cc4273937e49")]
		public virtual Arduino Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Arduino)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArduinoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArduinoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Arduino of a IoTModel
		/// <summary>
		/// Gets a list of Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Arduino> GetArduino(IoTModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(element, IoTModelDomainRoleId);
		}
		#endregion
		#region IoTModel link accessor
		/// <summary>
		/// Get the list of IoTModelHasArduino links to a IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> GetLinksToArduino ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel ioTModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino>(ioTModelInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModelDomainRoleId);
		}
		#endregion
		#region Arduino link accessor
		/// <summary>
		/// Get the IoTModelHasArduino link to a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino GetLinkToIoTModel (global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino arduinoInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino>(arduinoInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.ArduinoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Arduino not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTModelHasArduino instance accessors
		
		/// <summary>
		/// Get any IoTModelHasArduino links between a given IoTModel and a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino link in links )
			{
				if ( target.Equals(link.Arduino) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTModelHasArduino link between a given IoTModeland a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino link in links )
			{
				if ( target.Equals(link.Arduino) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IoTModelHasSensors
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9b303102-7d78-4b84-bf88-df6f95815036")]
	public partial class IoTModelHasSensors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTModelHasSensors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b303102, 0x7d78, 0x4b84, 0xbf, 0x88, 0xdf, 0x6f, 0x95, 0x81, 0x50, 0x36);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTModelHasSensors link in the same Partition as the given IoTModel
		/// </summary>
		/// <param name="source">IoTModel to use as the source of the relationship.</param>
		/// <param name="target">Sensors to use as the target of the relationship.</param>
		public IoTModelHasSensors(IoTModel source, Sensors target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTModelHasSensors.IoTModelDomainRoleId, source), new DslModeling::RoleAssignment(IoTModelHasSensors.SensorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasSensors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasSensors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasSensors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasSensors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel domain role code
		
		/// <summary>
		/// IoTModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTModelDomainRoleId = new global::System.Guid(0xc51675e7, 0xa200, 0x4bfb, 0xab, 0xca, 0x5c, 0xea, 0xc7, 0xd0, 0x3c, 0xb9);
		
		/// <summary>
		/// DomainRole IoTModel
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModel
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/IoTModel.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/IoTModel.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensors", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/IoTModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c51675e7-a200-4bfb-abca-5ceac7d03cb9")]
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTModel of a Sensors
		/// <summary>
		/// Gets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTModel GetIoTModel(Sensors element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SensorsDomainRoleId) as IoTModel;
		}
		
		/// <summary>
		/// Sets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTModel(Sensors element, IoTModel newIoTModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SensorsDomainRoleId, newIoTModel);
		}
		#endregion
		#region Sensors domain role code
		
		/// <summary>
		/// Sensors domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorsDomainRoleId = new global::System.Guid(0x9e24e408, 0x5e20, 0x42b1, 0x95, 0xa2, 0x38, 0x3e, 0x2d, 0x59, 0x79, 0xbd);
		
		/// <summary>
		/// DomainRole Sensors
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.Sensors
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/Sensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/Sensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTModel", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors/Sensors.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9e24e408-5e20-42b1-95a2-383e2d5979bd")]
		public virtual Sensors Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensors)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensors of a IoTModel
		/// <summary>
		/// Gets a list of Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensors> GetSensors(IoTModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensors>, Sensors>(element, IoTModelDomainRoleId);
		}
		#endregion
		#region IoTModel link accessor
		/// <summary>
		/// Get the list of IoTModelHasSensors links to a IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> GetLinksToSensors ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel ioTModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors>(ioTModelInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModelDomainRoleId);
		}
		#endregion
		#region Sensors link accessor
		/// <summary>
		/// Get the IoTModelHasSensors link to a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors GetLinkToIoTModel (global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors sensorsInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors>(sensorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.SensorsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Sensors not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTModelHasSensors instance accessors
		
		/// <summary>
		/// Get any IoTModelHasSensors links between a given IoTModel and a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTModelHasSensors link between a given IoTModeland a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IoTModelHasContoller
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0aaea400-bd24-486e-8593-8b3626c8ded1")]
	public partial class IoTModelHasContoller : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTModelHasContoller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0aaea400, 0xbd24, 0x486e, 0x85, 0x93, 0x8b, 0x36, 0x26, 0xc8, 0xde, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTModelHasContoller link in the same Partition as the given IoTModel
		/// </summary>
		/// <param name="source">IoTModel to use as the source of the relationship.</param>
		/// <param name="target">Contoller to use as the target of the relationship.</param>
		public IoTModelHasContoller(IoTModel source, Contoller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTModelHasContoller.IoTModelDomainRoleId, source), new DslModeling::RoleAssignment(IoTModelHasContoller.ContollerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasContoller(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasContoller(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasContoller(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasContoller(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel domain role code
		
		/// <summary>
		/// IoTModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTModelDomainRoleId = new global::System.Guid(0x0e9541a7, 0xf13d, 0x4e4b, 0xb7, 0x78, 0x6a, 0x81, 0x8a, 0xea, 0x90, 0xf0);
		
		/// <summary>
		/// DomainRole IoTModel
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModel
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/IoTModel.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/IoTModel.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contoller", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/IoTModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0e9541a7-f13d-4e4b-b778-6a818aea90f0")]
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTModel of a Contoller
		/// <summary>
		/// Gets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTModel GetIoTModel(Contoller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ContollerDomainRoleId) as IoTModel;
		}
		
		/// <summary>
		/// Sets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTModel(Contoller element, IoTModel newIoTModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ContollerDomainRoleId, newIoTModel);
		}
		#endregion
		#region Contoller domain role code
		
		/// <summary>
		/// Contoller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContollerDomainRoleId = new global::System.Guid(0xb9b3544e, 0x3ac3, 0x4ccc, 0xbc, 0x41, 0xe4, 0x3b, 0xb3, 0x41, 0xa8, 0x0c);
		
		/// <summary>
		/// DomainRole Contoller
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.Contoller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTModel", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller/Contoller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b9b3544e-3ac3-4ccc-bc41-e43bb341a80c")]
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contoller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContollerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContollerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contoller of a IoTModel
		/// <summary>
		/// Gets a list of Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Contoller> GetContoller(IoTModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Contoller>, Contoller>(element, IoTModelDomainRoleId);
		}
		#endregion
		#region IoTModel link accessor
		/// <summary>
		/// Get the list of IoTModelHasContoller links to a IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> GetLinksToContoller ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel ioTModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller>(ioTModelInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModelDomainRoleId);
		}
		#endregion
		#region Contoller link accessor
		/// <summary>
		/// Get the IoTModelHasContoller link to a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller GetLinkToIoTModel (global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller contollerInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller>(contollerInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.ContollerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Contoller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTModelHasContoller instance accessors
		
		/// <summary>
		/// Get any IoTModelHasContoller links between a given IoTModel and a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller link in links )
			{
				if ( target.Equals(link.Contoller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTModelHasContoller link between a given IoTModeland a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller link in links )
			{
				if ( target.Equals(link.Contoller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ArduinoReferencesSensors
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("14a1e751-972a-49ae-83fb-f2a20a5f8bb9")]
	public partial class ArduinoReferencesSensors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ArduinoReferencesSensors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14a1e751, 0x972a, 0x49ae, 0x83, 0xfb, 0xf2, 0xa2, 0x0a, 0x5f, 0x8b, 0xb9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ArduinoReferencesSensors link in the same Partition as the given Arduino
		/// </summary>
		/// <param name="source">Arduino to use as the source of the relationship.</param>
		/// <param name="target">Sensors to use as the target of the relationship.</param>
		public ArduinoReferencesSensors(Arduino source, Sensors target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ArduinoReferencesSensors.ArduinoDomainRoleId, source), new DslModeling::RoleAssignment(ArduinoReferencesSensors.SensorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesSensors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesSensors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesSensors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesSensors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Arduino domain role code
		
		/// <summary>
		/// Arduino domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArduinoDomainRoleId = new global::System.Guid(0x4e999c04, 0x171b, 0x453b, 0x80, 0x1d, 0xf7, 0x0e, 0x4b, 0xd3, 0x51, 0x08);
		
		/// <summary>
		/// DomainRole Arduino
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.Arduino
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Arduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Arduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensors", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Arduino.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4e999c04-171b-453b-801d-f70e4bd35108")]
		public virtual Arduino Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Arduino)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArduinoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArduinoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Arduino of a Sensors
		/// <summary>
		/// Gets a list of Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Arduino> GetArduino(Sensors element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(element, SensorsDomainRoleId);
		}
		#endregion
		#region Sensors domain role code
		
		/// <summary>
		/// Sensors domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorsDomainRoleId = new global::System.Guid(0x712d4a10, 0x763c, 0x45ca, 0x80, 0xc2, 0x69, 0xf2, 0x33, 0x15, 0xf6, 0xd3);
		
		/// <summary>
		/// DomainRole Sensors
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.Sensors
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Sensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Sensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Arduino", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors/Sensors.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("712d4a10-763c-45ca-80c2-69f23315f6d3")]
		public virtual Sensors Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensors)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensors of a Arduino
		/// <summary>
		/// Gets a list of Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Sensors> GetSensors(Arduino element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Sensors>, Sensors>(element, ArduinoDomainRoleId);
		}
		#endregion
		#region Arduino link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesSensors links to a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> GetLinksToSensors ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino arduinoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors>(arduinoInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.ArduinoDomainRoleId);
		}
		#endregion
		#region Sensors link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesSensors links to a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> GetLinksToArduino ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors sensorsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors>(sensorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.SensorsDomainRoleId);
		}
		#endregion
		#region ArduinoReferencesSensors instance accessors
		
		/// <summary>
		/// Get any ArduinoReferencesSensors links between a given Arduino and a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ArduinoReferencesSensors link between a given Arduinoand a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IoTModelHasActuators
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d487d4a2-122c-4592-a512-f635d05d3300")]
	public partial class IoTModelHasActuators : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IoTModelHasActuators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd487d4a2, 0x122c, 0x4592, 0xa5, 0x12, 0xf6, 0x35, 0xd0, 0x5d, 0x33, 0x00);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IoTModelHasActuators link in the same Partition as the given IoTModel
		/// </summary>
		/// <param name="source">IoTModel to use as the source of the relationship.</param>
		/// <param name="target">Actuators to use as the target of the relationship.</param>
		public IoTModelHasActuators(IoTModel source, Actuators target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IoTModelHasActuators.IoTModelDomainRoleId, source), new DslModeling::RoleAssignment(IoTModelHasActuators.ActuatorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasActuators(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasActuators(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IoTModelHasActuators(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IoTModelHasActuators(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel domain role code
		
		/// <summary>
		/// IoTModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IoTModelDomainRoleId = new global::System.Guid(0xbb7772dc, 0xfdee, 0x4ac1, 0x98, 0x6f, 0x89, 0x1b, 0x8c, 0x86, 0xfc, 0xd0);
		
		/// <summary>
		/// DomainRole IoTModel
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModel
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/IoTModel.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/IoTModel.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuators", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/IoTModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb7772dc-fdee-4ac1-986f-891b8c86fcd0")]
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IoTModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IoTModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IoTModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IoTModel of a Actuators
		/// <summary>
		/// Gets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IoTModel GetIoTModel(Actuators element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActuatorsDomainRoleId) as IoTModel;
		}
		
		/// <summary>
		/// Sets IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIoTModel(Actuators element, IoTModel newIoTModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActuatorsDomainRoleId, newIoTModel);
		}
		#endregion
		#region Actuators domain role code
		
		/// <summary>
		/// Actuators domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorsDomainRoleId = new global::System.Guid(0x67f17e92, 0x3831, 0x4b6e, 0x8f, 0xef, 0xac, 0xde, 0x22, 0x63, 0x30, 0x0a);
		
		/// <summary>
		/// DomainRole Actuators
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.Actuators
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/Actuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/Actuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IoTModel", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators/Actuators.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("67f17e92-3831-4b6e-8fef-acde2263300a")]
		public virtual Actuators Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuators)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuators of a IoTModel
		/// <summary>
		/// Gets a list of Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actuators> GetActuators(IoTModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actuators>, Actuators>(element, IoTModelDomainRoleId);
		}
		#endregion
		#region IoTModel link accessor
		/// <summary>
		/// Get the list of IoTModelHasActuators links to a IoTModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> GetLinksToActuators ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel ioTModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators>(ioTModelInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModelDomainRoleId);
		}
		#endregion
		#region Actuators link accessor
		/// <summary>
		/// Get the IoTModelHasActuators link to a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators GetLinkToIoTModel (global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators actuatorsInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators>(actuatorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.ActuatorsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Actuators not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IoTModelHasActuators instance accessors
		
		/// <summary>
		/// Get any IoTModelHasActuators links between a given IoTModel and a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IoTModelHasActuators link between a given IoTModeland a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModelDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ArduinoReferencesActuators
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5c44d8fe-c99e-4cdb-b945-de68102929c2")]
	public partial class ArduinoReferencesActuators : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ArduinoReferencesActuators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c44d8fe, 0xc99e, 0x4cdb, 0xb9, 0x45, 0xde, 0x68, 0x10, 0x29, 0x29, 0xc2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ArduinoReferencesActuators link in the same Partition as the given Arduino
		/// </summary>
		/// <param name="source">Arduino to use as the source of the relationship.</param>
		/// <param name="target">Actuators to use as the target of the relationship.</param>
		public ArduinoReferencesActuators(Arduino source, Actuators target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ArduinoReferencesActuators.ArduinoDomainRoleId, source), new DslModeling::RoleAssignment(ArduinoReferencesActuators.ActuatorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesActuators(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesActuators(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesActuators(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesActuators(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Arduino domain role code
		
		/// <summary>
		/// Arduino domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArduinoDomainRoleId = new global::System.Guid(0xca83aa00, 0x5aa6, 0x4b9f, 0xba, 0xbf, 0xdd, 0xb4, 0xf6, 0x62, 0xb6, 0xf0);
		
		/// <summary>
		/// DomainRole Arduino
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.Arduino
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Arduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Arduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuators", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Arduino.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ca83aa00-5aa6-4b9f-babf-ddb4f662b6f0")]
		public virtual Arduino Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Arduino)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArduinoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArduinoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Arduino of a Actuators
		/// <summary>
		/// Gets a list of Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Arduino> GetArduino(Actuators element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(element, ActuatorsDomainRoleId);
		}
		#endregion
		#region Actuators domain role code
		
		/// <summary>
		/// Actuators domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorsDomainRoleId = new global::System.Guid(0xd43bff53, 0x9291, 0x4d44, 0xa8, 0x2d, 0x8b, 0x12, 0xb5, 0xf7, 0xc4, 0x60);
		
		/// <summary>
		/// DomainRole Actuators
		/// Description for
		/// UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.Actuators
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Actuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Actuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Arduino", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators/Actuators.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d43bff53-9291-4d44-a82d-8b12b5f7c460")]
		public virtual Actuators Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuators)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuators of a Arduino
		/// <summary>
		/// Gets a list of Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Actuators> GetActuators(Arduino element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Actuators>, Actuators>(element, ArduinoDomainRoleId);
		}
		#endregion
		#region Arduino link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesActuators links to a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> GetLinksToActuators ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino arduinoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators>(arduinoInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ArduinoDomainRoleId);
		}
		#endregion
		#region Actuators link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesActuators links to a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> GetLinksToArduino ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators actuatorsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators>(actuatorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ActuatorsDomainRoleId);
		}
		#endregion
		#region ArduinoReferencesActuators instance accessors
		
		/// <summary>
		/// Get any ArduinoReferencesActuators links between a given Arduino and a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ArduinoReferencesActuators link between a given Arduinoand a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ArduinoReferencesContoller
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0a944102-6cb2-401c-87f0-cfe05fd1e036")]
	public partial class ArduinoReferencesContoller : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ArduinoReferencesContoller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a944102, 0x6cb2, 0x401c, 0x87, 0xf0, 0xcf, 0xe0, 0x5f, 0xd1, 0xe0, 0x36);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ArduinoReferencesContoller link in the same Partition as the given Arduino
		/// </summary>
		/// <param name="source">Arduino to use as the source of the relationship.</param>
		/// <param name="target">Contoller to use as the target of the relationship.</param>
		public ArduinoReferencesContoller(Arduino source, Contoller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ArduinoReferencesContoller.ArduinoDomainRoleId, source), new DslModeling::RoleAssignment(ArduinoReferencesContoller.ContollerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesContoller(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesContoller(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ArduinoReferencesContoller(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ArduinoReferencesContoller(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Arduino domain role code
		
		/// <summary>
		/// Arduino domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArduinoDomainRoleId = new global::System.Guid(0x2c0a6294, 0x3a72, 0x4b39, 0x80, 0x2a, 0x42, 0x15, 0xc4, 0x13, 0xfc, 0x9e);
		
		/// <summary>
		/// DomainRole Arduino
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.Arduino
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Arduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Arduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contoller", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Arduino.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2c0a6294-3a72-4b39-802a-4215c413fc9e")]
		public virtual Arduino Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Arduino)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArduinoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArduinoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Arduino of a Contoller
		/// <summary>
		/// Gets a list of Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Arduino> GetArduino(Contoller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(element, ContollerDomainRoleId);
		}
		#endregion
		#region Contoller domain role code
		
		/// <summary>
		/// Contoller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContollerDomainRoleId = new global::System.Guid(0xbe10cfc0, 0x2e24, 0x4579, 0x92, 0xf4, 0x7f, 0x72, 0x18, 0x18, 0x77, 0x2c);
		
		/// <summary>
		/// DomainRole Contoller
		/// Description for
		/// UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.Contoller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Arduino", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller/Contoller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("be10cfc0-2e24-4579-92f4-7f721818772c")]
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contoller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContollerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContollerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contoller of a Arduino
		/// <summary>
		/// Gets a list of Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Contoller> GetContoller(Arduino element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Contoller>, Contoller>(element, ArduinoDomainRoleId);
		}
		#endregion
		#region Arduino link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesContoller links to a Arduino.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> GetLinksToContoller ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino arduinoInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller>(arduinoInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ArduinoDomainRoleId);
		}
		#endregion
		#region Contoller link accessor
		/// <summary>
		/// Get the list of ArduinoReferencesContoller links to a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> GetLinksToArduino ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller contollerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller>(contollerInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ContollerDomainRoleId);
		}
		#endregion
		#region ArduinoReferencesContoller instance accessors
		
		/// <summary>
		/// Get any ArduinoReferencesContoller links between a given Arduino and a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller link in links )
			{
				if ( target.Equals(link.Contoller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ArduinoReferencesContoller link between a given Arduinoand a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ArduinoDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller link in links )
			{
				if ( target.Equals(link.Contoller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ContollerHasIO
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("db234893-70b5-4fa2-9343-ccb0e2741b5a")]
	public partial class ContollerHasIO : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContollerHasIO domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb234893, 0x70b5, 0x4fa2, 0x93, 0x43, 0xcc, 0xb0, 0xe2, 0x74, 0x1b, 0x5a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContollerHasIO link in the same Partition as the given Contoller
		/// </summary>
		/// <param name="source">Contoller to use as the source of the relationship.</param>
		/// <param name="target">IO to use as the target of the relationship.</param>
		public ContollerHasIO(Contoller source, IO target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContollerHasIO.ContollerDomainRoleId, source), new DslModeling::RoleAssignment(ContollerHasIO.IODomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasIO(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasIO(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasIO(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasIO(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Contoller domain role code
		
		/// <summary>
		/// Contoller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContollerDomainRoleId = new global::System.Guid(0x05e3cd6e, 0x69fd, 0x4cf6, 0x94, 0xa6, 0x24, 0xd4, 0xc2, 0x84, 0x11, 0x9e);
		
		/// <summary>
		/// DomainRole Contoller
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.Contoller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IO", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/Contoller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05e3cd6e-69fd-4cf6-94a6-24d4c284119e")]
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contoller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContollerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContollerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contoller of a IO
		/// <summary>
		/// Gets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Contoller GetContoller(IO element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IODomainRoleId) as Contoller;
		}
		
		/// <summary>
		/// Sets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContoller(IO element, Contoller newContoller)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IODomainRoleId, newContoller);
		}
		#endregion
		#region IO domain role code
		
		/// <summary>
		/// IO domain role Id.
		/// </summary>
		public static readonly global::System.Guid IODomainRoleId = new global::System.Guid(0x8f9f1453, 0x55df, 0x4af8, 0x91, 0x6a, 0x2b, 0xc4, 0x03, 0xec, 0x61, 0x0a);
		
		/// <summary>
		/// DomainRole IO
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Contoller", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO/IO.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8f9f1453-55df-4af8-916a-2bc403ec610a")]
		public virtual IO IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IO)DslModeling::DomainRoleInfo.GetRolePlayer(this, IODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IO of a Contoller
		/// <summary>
		/// Gets a list of IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IO> GetIO(Contoller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(element, ContollerDomainRoleId);
		}
		#endregion
		#region Contoller link accessor
		/// <summary>
		/// Get the list of ContollerHasIO links to a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> GetLinksToIO ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller contollerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO>(contollerInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.ContollerDomainRoleId);
		}
		#endregion
		#region IO link accessor
		/// <summary>
		/// Get the ContollerHasIO link to a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO GetLinkToContoller (global::UPM_IPS.JPBSDSJDFProyectoIPS.IO iOInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO>(iOInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IODomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IO not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContollerHasIO instance accessors
		
		/// <summary>
		/// Get any ContollerHasIO links between a given Contoller and a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IO target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO link in links )
			{
				if ( target.Equals(link.IO) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContollerHasIO link between a given Contollerand a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IO target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO link in links )
			{
				if ( target.Equals(link.IO) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ContollerHasIf
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2f7ad21d-fdbd-4d46-938d-40626b5bc9ab")]
	public partial class ContollerHasIf : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContollerHasIf domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f7ad21d, 0xfdbd, 0x4d46, 0x93, 0x8d, 0x40, 0x62, 0x6b, 0x5b, 0xc9, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContollerHasIf link in the same Partition as the given Contoller
		/// </summary>
		/// <param name="source">Contoller to use as the source of the relationship.</param>
		/// <param name="target">If to use as the target of the relationship.</param>
		public ContollerHasIf(Contoller source, If target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContollerHasIf.ContollerDomainRoleId, source), new DslModeling::RoleAssignment(ContollerHasIf.IfDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasIf(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasIf(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasIf(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasIf(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Contoller domain role code
		
		/// <summary>
		/// Contoller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContollerDomainRoleId = new global::System.Guid(0xa9e74420, 0x1bdf, 0x400b, 0xb1, 0x83, 0xa4, 0x22, 0x3e, 0xc4, 0xfb, 0x41);
		
		/// <summary>
		/// DomainRole Contoller
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.Contoller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "If", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/Contoller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a9e74420-1bdf-400b-b183-a4223ec4fb41")]
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contoller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContollerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContollerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contoller of a If
		/// <summary>
		/// Gets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Contoller GetContoller(If element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IfDomainRoleId) as Contoller;
		}
		
		/// <summary>
		/// Sets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContoller(If element, Contoller newContoller)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IfDomainRoleId, newContoller);
		}
		#endregion
		#region If domain role code
		
		/// <summary>
		/// If domain role Id.
		/// </summary>
		public static readonly global::System.Guid IfDomainRoleId = new global::System.Guid(0x0dd56d48, 0x8b7e, 0x424d, 0xa9, 0x4e, 0x24, 0x2c, 0x20, 0xb2, 0x37, 0x21);
		
		/// <summary>
		/// DomainRole If
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.If
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/If.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/If.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Contoller", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf/If.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0dd56d48-8b7e-424d-a94e-242c20b23721")]
		public virtual If If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (If)DslModeling::DomainRoleInfo.GetRolePlayer(this, IfDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IfDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access If of a Contoller
		/// <summary>
		/// Gets a list of If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<If> GetIf(Contoller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<If>, If>(element, ContollerDomainRoleId);
		}
		#endregion
		#region Contoller link accessor
		/// <summary>
		/// Get the list of ContollerHasIf links to a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> GetLinksToIf ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller contollerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf>(contollerInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.ContollerDomainRoleId);
		}
		#endregion
		#region If link accessor
		/// <summary>
		/// Get the ContollerHasIf link to a If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf GetLinkToContoller (global::UPM_IPS.JPBSDSJDFProyectoIPS.If ifInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf>(ifInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.IfDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of If not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContollerHasIf instance accessors
		
		/// <summary>
		/// Get any ContollerHasIf links between a given Contoller and a If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.If target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf link in links )
			{
				if ( target.Equals(link.If) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContollerHasIf link between a given Contollerand a If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.If target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf link in links )
			{
				if ( target.Equals(link.If) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship ContollerHasDelay
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a17e44a8-8f99-46f4-ab3f-2743629d43ad")]
	public partial class ContollerHasDelay : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ContollerHasDelay domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa17e44a8, 0x8f99, 0x46f4, 0xab, 0x3f, 0x27, 0x43, 0x62, 0x9d, 0x43, 0xad);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ContollerHasDelay link in the same Partition as the given Contoller
		/// </summary>
		/// <param name="source">Contoller to use as the source of the relationship.</param>
		/// <param name="target">Delay to use as the target of the relationship.</param>
		public ContollerHasDelay(Contoller source, Delay target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ContollerHasDelay.ContollerDomainRoleId, source), new DslModeling::RoleAssignment(ContollerHasDelay.DelayDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasDelay(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasDelay(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ContollerHasDelay(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ContollerHasDelay(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Contoller domain role code
		
		/// <summary>
		/// Contoller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContollerDomainRoleId = new global::System.Guid(0x7b3dc6a6, 0x7cda, 0x427b, 0x85, 0x36, 0x5f, 0x8d, 0xe1, 0xa8, 0x2f, 0x29);
		
		/// <summary>
		/// DomainRole Contoller
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.Contoller
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Delay", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Contoller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7b3dc6a6-7cda-427b-8536-5f8de1a82f29")]
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contoller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContollerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContollerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contoller of a Delay
		/// <summary>
		/// Gets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Contoller GetContoller(Delay element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DelayDomainRoleId) as Contoller;
		}
		
		/// <summary>
		/// Sets Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContoller(Delay element, Contoller newContoller)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DelayDomainRoleId, newContoller);
		}
		#endregion
		#region Delay domain role code
		
		/// <summary>
		/// Delay domain role Id.
		/// </summary>
		public static readonly global::System.Guid DelayDomainRoleId = new global::System.Guid(0x61bb165f, 0x1c3b, 0x47de, 0xb2, 0x79, 0xa0, 0x50, 0x03, 0x32, 0x96, 0x08);
		
		/// <summary>
		/// DomainRole Delay
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.Delay
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Delay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Delay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Contoller", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay/Delay.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("61bb165f-1c3b-47de-b279-a05003329608")]
		public virtual Delay Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Delay)DslModeling::DomainRoleInfo.GetRolePlayer(this, DelayDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DelayDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Delay of a Contoller
		/// <summary>
		/// Gets a list of Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Delay> GetDelay(Contoller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Delay>, Delay>(element, ContollerDomainRoleId);
		}
		#endregion
		#region Contoller link accessor
		/// <summary>
		/// Get the list of ContollerHasDelay links to a Contoller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> GetLinksToDelay ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller contollerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay>(contollerInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.ContollerDomainRoleId);
		}
		#endregion
		#region Delay link accessor
		/// <summary>
		/// Get the ContollerHasDelay link to a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay GetLinkToContoller (global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay delayInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay>(delayInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.DelayDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Delay not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ContollerHasDelay instance accessors
		
		/// <summary>
		/// Get any ContollerHasDelay links between a given Contoller and a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ContollerHasDelay link between a given Contollerand a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.ContollerDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IfReferencesIO
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("383571aa-763b-492b-8608-cf7fb9426fe0")]
	public partial class IfReferencesIO : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IfReferencesIO domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x383571aa, 0x763b, 0x492b, 0x86, 0x08, 0xcf, 0x7f, 0xb9, 0x42, 0x6f, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IfReferencesIO link in the same Partition as the given If
		/// </summary>
		/// <param name="source">If to use as the source of the relationship.</param>
		/// <param name="target">IO to use as the target of the relationship.</param>
		public IfReferencesIO(If source, IO target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IfReferencesIO.IfDomainRoleId, source), new DslModeling::RoleAssignment(IfReferencesIO.IODomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IfReferencesIO(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IfReferencesIO(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IfReferencesIO(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IfReferencesIO(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region If domain role code
		
		/// <summary>
		/// If domain role Id.
		/// </summary>
		public static readonly global::System.Guid IfDomainRoleId = new global::System.Guid(0x17212c4c, 0x533f, 0x4a64, 0x9d, 0x11, 0x22, 0x5f, 0xce, 0x48, 0x31, 0x1a);
		
		/// <summary>
		/// DomainRole If
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.If
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/If.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/If.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IO", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/If.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("17212c4c-533f-4a64-9d11-225fce48311a")]
		public virtual If If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (If)DslModeling::DomainRoleInfo.GetRolePlayer(this, IfDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IfDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access If of a IO
		/// <summary>
		/// Gets If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static If GetIf(IO element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IODomainRoleId) as If;
		}
		
		/// <summary>
		/// Sets If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIf(IO element, If newIf)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IODomainRoleId, newIf);
		}
		#endregion
		#region IO domain role code
		
		/// <summary>
		/// IO domain role Id.
		/// </summary>
		public static readonly global::System.Guid IODomainRoleId = new global::System.Guid(0x3251ab6a, 0x9cfc, 0x409d, 0x9f, 0xd6, 0x1a, 0x11, 0xf6, 0x1f, 0x5e, 0x20);
		
		/// <summary>
		/// DomainRole IO
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "If", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO/IO.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3251ab6a-9cfc-409d-9fd6-1a11f61f5e20")]
		public virtual IO IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IO)DslModeling::DomainRoleInfo.GetRolePlayer(this, IODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IO of a If
		/// <summary>
		/// Gets a list of IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IO> GetIO(If element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(element, IfDomainRoleId);
		}
		#endregion
		#region If link accessor
		/// <summary>
		/// Get the list of IfReferencesIO links to a If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> GetLinksToIO ( global::UPM_IPS.JPBSDSJDFProyectoIPS.If ifInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO>(ifInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IfDomainRoleId);
		}
		#endregion
		#region IO link accessor
		/// <summary>
		/// Get the IfReferencesIO link to a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO GetLinkToIf (global::UPM_IPS.JPBSDSJDFProyectoIPS.IO iOInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO>(iOInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IODomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IO not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IfReferencesIO instance accessors
		
		/// <summary>
		/// Get any IfReferencesIO links between a given If and a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.If source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IO target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IfDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO link in links )
			{
				if ( target.Equals(link.IO) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IfReferencesIO link between a given Ifand a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.If source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IO target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IfDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO link in links )
			{
				if ( target.Equals(link.IO) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IfReferencesDelay
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dd28af64-e88d-46b3-abb1-b2cb66ba6ec5")]
	public partial class IfReferencesDelay : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IfReferencesDelay domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd28af64, 0xe88d, 0x46b3, 0xab, 0xb1, 0xb2, 0xcb, 0x66, 0xba, 0x6e, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IfReferencesDelay link in the same Partition as the given If
		/// </summary>
		/// <param name="source">If to use as the source of the relationship.</param>
		/// <param name="target">Delay to use as the target of the relationship.</param>
		public IfReferencesDelay(If source, Delay target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IfReferencesDelay.IfDomainRoleId, source), new DslModeling::RoleAssignment(IfReferencesDelay.DelayDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IfReferencesDelay(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IfReferencesDelay(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IfReferencesDelay(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IfReferencesDelay(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region If domain role code
		
		/// <summary>
		/// If domain role Id.
		/// </summary>
		public static readonly global::System.Guid IfDomainRoleId = new global::System.Guid(0x4f97371c, 0xac11, 0x4e69, 0x9a, 0x02, 0xba, 0x5c, 0xa6, 0xca, 0xd3, 0x77);
		
		/// <summary>
		/// DomainRole If
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.If
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/If.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/If.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Delay", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/If.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f97371c-ac11-4e69-9a02-ba5ca6cad377")]
		public virtual If If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (If)DslModeling::DomainRoleInfo.GetRolePlayer(this, IfDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IfDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access If of a Delay
		/// <summary>
		/// Gets If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static If GetIf(Delay element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DelayDomainRoleId) as If;
		}
		
		/// <summary>
		/// Sets If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIf(Delay element, If newIf)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DelayDomainRoleId, newIf);
		}
		#endregion
		#region Delay domain role code
		
		/// <summary>
		/// Delay domain role Id.
		/// </summary>
		public static readonly global::System.Guid DelayDomainRoleId = new global::System.Guid(0xf31e6fa1, 0x176c, 0x4aef, 0x96, 0xe4, 0xfc, 0xec, 0x42, 0x8a, 0xe2, 0x8f);
		
		/// <summary>
		/// DomainRole Delay
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.Delay
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/Delay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/Delay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "If", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay/Delay.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f31e6fa1-176c-4aef-96e4-fcec428ae28f")]
		public virtual Delay Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Delay)DslModeling::DomainRoleInfo.GetRolePlayer(this, DelayDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DelayDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Delay of a If
		/// <summary>
		/// Gets a list of Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Delay> GetDelay(If element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Delay>, Delay>(element, IfDomainRoleId);
		}
		#endregion
		#region If link accessor
		/// <summary>
		/// Get the list of IfReferencesDelay links to a If.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> GetLinksToDelay ( global::UPM_IPS.JPBSDSJDFProyectoIPS.If ifInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay>(ifInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.IfDomainRoleId);
		}
		#endregion
		#region Delay link accessor
		/// <summary>
		/// Get the IfReferencesDelay link to a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay GetLinkToIf (global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay delayInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay>(delayInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.DelayDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Delay not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IfReferencesDelay instance accessors
		
		/// <summary>
		/// Get any IfReferencesDelay links between a given If and a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.If source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.IfDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IfReferencesDelay link between a given Ifand a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.If source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.IfDomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IOReferencesActuators
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d69756f4-a799-4adb-baf7-7296004bf51f")]
	public partial class IOReferencesActuators : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IOReferencesActuators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd69756f4, 0xa799, 0x4adb, 0xba, 0xf7, 0x72, 0x96, 0x00, 0x4b, 0xf5, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IOReferencesActuators link in the same Partition as the given IO
		/// </summary>
		/// <param name="source">IO to use as the source of the relationship.</param>
		/// <param name="target">Actuators to use as the target of the relationship.</param>
		public IOReferencesActuators(IO source, Actuators target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IOReferencesActuators.IODomainRoleId, source), new DslModeling::RoleAssignment(IOReferencesActuators.ActuatorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesActuators(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesActuators(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesActuators(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesActuators(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IO domain role code
		
		/// <summary>
		/// IO domain role Id.
		/// </summary>
		public static readonly global::System.Guid IODomainRoleId = new global::System.Guid(0xf32e7136, 0xb0ef, 0x483f, 0x90, 0x19, 0x22, 0x63, 0x1f, 0xed, 0x98, 0x7a);
		
		/// <summary>
		/// DomainRole IO
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Actuators", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/IO.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f32e7136-b0ef-483f-9019-22631fed987a")]
		public virtual IO IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IO)DslModeling::DomainRoleInfo.GetRolePlayer(this, IODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IO of a Actuators
		/// <summary>
		/// Gets a list of IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IO> GetIO(Actuators element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(element, ActuatorsDomainRoleId);
		}
		#endregion
		#region Actuators domain role code
		
		/// <summary>
		/// Actuators domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActuatorsDomainRoleId = new global::System.Guid(0xbf2650df, 0xdfcf, 0x4d6f, 0xab, 0x11, 0x01, 0x61, 0x2e, 0x13, 0xb5, 0x58);
		
		/// <summary>
		/// DomainRole Actuators
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.Actuators
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/Actuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/Actuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IO", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators/Actuators.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf2650df-dfcf-4d6f-ab11-01612e13b558")]
		public virtual Actuators Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Actuators)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActuatorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActuatorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Actuators of a IO
		/// <summary>
		/// Gets Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Actuators GetActuators(IO element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IODomainRoleId) as Actuators;
		}
		
		/// <summary>
		/// Sets Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetActuators(IO element, Actuators newActuators)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IODomainRoleId, newActuators);
		}
		#endregion
		#region IO link accessor
		/// <summary>
		/// Get the IOReferencesActuators link to a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators GetLinkToActuators (global::UPM_IPS.JPBSDSJDFProyectoIPS.IO iOInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators>(iOInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IODomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IO not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Actuators link accessor
		/// <summary>
		/// Get the list of IOReferencesActuators links to a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> GetLinksToIO ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators actuatorsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators>(actuatorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.ActuatorsDomainRoleId);
		}
		#endregion
		#region IOReferencesActuators instance accessors
		
		/// <summary>
		/// Get any IOReferencesActuators links between a given IO and a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IOReferencesActuators link between a given IOand a Actuators.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators link in links )
			{
				if ( target.Equals(link.Actuators) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IOReferencesSensors
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("98bb3ef9-bf05-4d01-8e79-698e686769d9")]
	public partial class IOReferencesSensors : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IOReferencesSensors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x98bb3ef9, 0xbf05, 0x4d01, 0x8e, 0x79, 0x69, 0x8e, 0x68, 0x67, 0x69, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IOReferencesSensors link in the same Partition as the given IO
		/// </summary>
		/// <param name="source">IO to use as the source of the relationship.</param>
		/// <param name="target">Sensors to use as the target of the relationship.</param>
		public IOReferencesSensors(IO source, Sensors target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IOReferencesSensors.IODomainRoleId, source), new DslModeling::RoleAssignment(IOReferencesSensors.SensorsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesSensors(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesSensors(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesSensors(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesSensors(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IO domain role code
		
		/// <summary>
		/// IO domain role Id.
		/// </summary>
		public static readonly global::System.Guid IODomainRoleId = new global::System.Guid(0xde21493b, 0x8c2b, 0x49c7, 0x87, 0x49, 0x1e, 0xeb, 0xa8, 0x09, 0xb6, 0xef);
		
		/// <summary>
		/// DomainRole IO
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Sensors", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/IO.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("de21493b-8c2b-49c7-8749-1eeba809b6ef")]
		public virtual IO IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IO)DslModeling::DomainRoleInfo.GetRolePlayer(this, IODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IO of a Sensors
		/// <summary>
		/// Gets a list of IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IO> GetIO(Sensors element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(element, SensorsDomainRoleId);
		}
		#endregion
		#region Sensors domain role code
		
		/// <summary>
		/// Sensors domain role Id.
		/// </summary>
		public static readonly global::System.Guid SensorsDomainRoleId = new global::System.Guid(0xcd38c4fa, 0xf4cf, 0x40a3, 0xb5, 0xd9, 0x4c, 0x07, 0x7e, 0x92, 0xc7, 0x06);
		
		/// <summary>
		/// DomainRole Sensors
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.Sensors
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/Sensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/Sensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IO", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors/Sensors.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd38c4fa-f4cf-40a3-b5d9-4c077e92c706")]
		public virtual Sensors Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Sensors)DslModeling::DomainRoleInfo.GetRolePlayer(this, SensorsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SensorsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sensors of a IO
		/// <summary>
		/// Gets Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Sensors GetSensors(IO element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IODomainRoleId) as Sensors;
		}
		
		/// <summary>
		/// Sets Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSensors(IO element, Sensors newSensors)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IODomainRoleId, newSensors);
		}
		#endregion
		#region IO link accessor
		/// <summary>
		/// Get the IOReferencesSensors link to a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors GetLinkToSensors (global::UPM_IPS.JPBSDSJDFProyectoIPS.IO iOInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors>(iOInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IODomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IO not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Sensors link accessor
		/// <summary>
		/// Get the list of IOReferencesSensors links to a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> GetLinksToIO ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors sensorsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors>(sensorsInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.SensorsDomainRoleId);
		}
		#endregion
		#region IOReferencesSensors instance accessors
		
		/// <summary>
		/// Get any IOReferencesSensors links between a given IO and a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IOReferencesSensors link between a given IOand a Sensors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors link in links )
			{
				if ( target.Equals(link.Sensors) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainRelationship IOReferencesDelay
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("778f2258-6ef7-453b-8738-c5870d8ca3b7")]
	public partial class IOReferencesDelay : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IOReferencesDelay domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x778f2258, 0x6ef7, 0x453b, 0x87, 0x38, 0xc5, 0x87, 0x0d, 0x8c, 0xa3, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IOReferencesDelay link in the same Partition as the given IO
		/// </summary>
		/// <param name="source">IO to use as the source of the relationship.</param>
		/// <param name="target">Delay to use as the target of the relationship.</param>
		public IOReferencesDelay(IO source, Delay target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IOReferencesDelay.IODomainRoleId, source), new DslModeling::RoleAssignment(IOReferencesDelay.DelayDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesDelay(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesDelay(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IOReferencesDelay(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IOReferencesDelay(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IO domain role code
		
		/// <summary>
		/// IO domain role Id.
		/// </summary>
		public static readonly global::System.Guid IODomainRoleId = new global::System.Guid(0x75df7996, 0x63f9, 0x47fd, 0x80, 0x6f, 0x8e, 0x41, 0x13, 0x57, 0x18, 0x71);
		
		/// <summary>
		/// DomainRole IO
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IO
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Delay", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/IO.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("75df7996-63f9-47fd-806f-8e4113571871")]
		public virtual IO IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IO)DslModeling::DomainRoleInfo.GetRolePlayer(this, IODomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IODomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IO of a Delay
		/// <summary>
		/// Gets a list of IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IO> GetIO(Delay element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(element, DelayDomainRoleId);
		}
		#endregion
		#region Delay domain role code
		
		/// <summary>
		/// Delay domain role Id.
		/// </summary>
		public static readonly global::System.Guid DelayDomainRoleId = new global::System.Guid(0x0ee9f9eb, 0x4c68, 0x4eed, 0x93, 0xe3, 0x69, 0xd6, 0xe5, 0xae, 0xe1, 0x4b);
		
		/// <summary>
		/// DomainRole Delay
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.Delay
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/Delay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/Delay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IO", PropertyDisplayNameKey="UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay/Delay.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0ee9f9eb-4c68-4eed-93e3-69d6e5aee14b")]
		public virtual Delay Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Delay)DslModeling::DomainRoleInfo.GetRolePlayer(this, DelayDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DelayDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Delay of a IO
		/// <summary>
		/// Gets Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Delay GetDelay(IO element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IODomainRoleId) as Delay;
		}
		
		/// <summary>
		/// Sets Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDelay(IO element, Delay newDelay)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IODomainRoleId, newDelay);
		}
		#endregion
		#region IO link accessor
		/// <summary>
		/// Get the IOReferencesDelay link to a IO.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay GetLinkToDelay (global::UPM_IPS.JPBSDSJDFProyectoIPS.IO iOInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay>(iOInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IODomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IO not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Delay link accessor
		/// <summary>
		/// Get the list of IOReferencesDelay links to a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> GetLinksToIO ( global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay delayInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay>(delayInstance, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.DelayDomainRoleId);
		}
		#endregion
		#region IOReferencesDelay instance accessors
		
		/// <summary>
		/// Get any IOReferencesDelay links between a given IO and a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> GetLinks( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay>();
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IOReferencesDelay link between a given IOand a Delay.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay GetLink( global::UPM_IPS.JPBSDSJDFProyectoIPS.IO source, global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay>(source, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IODomainRoleId);
			foreach ( global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay link in links )
			{
				if ( target.Equals(link.Delay) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
