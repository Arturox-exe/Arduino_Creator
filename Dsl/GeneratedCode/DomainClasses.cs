//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass IoTModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d4821b4b-6cfe-444e-a100-0d6de88d7b99")]
	public partial class IoTModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IoTModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4821b4b, 0x6cfe, 0x444e, 0xa1, 0x00, 0x0d, 0x6d, 0xe8, 0x8d, 0x7b, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IoTModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Arduino opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Arduino.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Arduino> Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModelDomainRoleId);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensors> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensors>, Sensors>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModelDomainRoleId);
			}
		}
		#endregion
		#region Contoller opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Contoller.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Contoller> Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Contoller>, Contoller>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModelDomainRoleId);
			}
		}
		#endregion
		#region Actuators opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuators.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuators> Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuators>, Actuators>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino sourceArduino1 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino;
			if (sourceArduino1 != null)
			{
				// Create link for path IoTModelHasArduino.Arduino
				this.Arduino.Add(sourceArduino1);

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors sourceSensors2 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors;
			if (sourceSensors2 != null)
			{
				// Create link for path IoTModelHasSensors.Sensors
				this.Sensors.Add(sourceSensors2);

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller sourceContoller3 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller;
			if (sourceContoller3 != null)
			{
				// Create link for path IoTModelHasContoller.Contoller
				this.Contoller.Add(sourceContoller3);

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators sourceActuators4 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators;
			if (sourceActuators4 != null)
			{
				// Create link for path IoTModelHasActuators.Actuators
				this.Actuators.Add(sourceActuators4);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino sourceArduino1 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Arduino;
			if (sourceArduino1 != null)
			{
				// Delete link for path IoTModelHasArduino.Arduino
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel)this, sourceArduino1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.IoTModelDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.ArduinoDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors sourceSensors2 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Sensors;
			if (sourceSensors2 != null)
			{
				// Delete link for path IoTModelHasSensors.Sensors
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel)this, sourceSensors2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.IoTModelDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.SensorsDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller sourceContoller3 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller;
			if (sourceContoller3 != null)
			{
				// Delete link for path IoTModelHasContoller.Contoller
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel)this, sourceContoller3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.IoTModelDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.ContollerDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators sourceActuators4 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Actuators;
			if (sourceActuators4 != null)
			{
				// Delete link for path IoTModelHasActuators.Actuators
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModel)this, sourceActuators4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.IoTModelDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.ActuatorsDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Arduino
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Arduino
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Arduino.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Arduino.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8bcd77f7-67df-495e-b9dd-88822ded7189")]
	public partial class Arduino : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Arduino domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8bcd77f7, 0x67df, 0x495e, 0xb9, 0xdd, 0x88, 0x82, 0x2d, 0xed, 0x71, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Arduino(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Arduino(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTModel.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.Arduino
		/// </summary>
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.ArduinoDomainRoleId) as IoTModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasArduino.ArduinoDomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sensors.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.Arduino
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Sensors> Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Sensors>, Sensors>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.ArduinoDomainRoleId);
			}
		}
		#endregion
		#region Actuators opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Actuators.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.Arduino
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Actuators> Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Actuators>, Actuators>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ArduinoDomainRoleId);
			}
		}
		#endregion
		#region Contoller opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Contoller.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.Arduino
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Contoller> Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Contoller>, Contoller>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ArduinoDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Sensors
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Sensors
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Sensors.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Sensors.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("24479709-0dee-46d6-ae16-b9d2129cccc5")]
	public partial class Sensors : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Sensors domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24479709, 0x0dee, 0x46d6, 0xae, 0x16, 0xb9, 0xd2, 0x12, 0x9c, 0xcc, 0xc5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensors(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Sensors(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTModel.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.Sensors
		/// </summary>
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.SensorsDomainRoleId) as IoTModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasSensors.SensorsDomainRoleId, value);
			}
		}
		#endregion
		#region Arduino opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Arduino.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.Sensors
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Arduino> Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesSensors.SensorsDomainRoleId);
			}
		}
		#endregion
		#region IO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IO.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.Sensors
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IO> IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.SensorsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Temperatue
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e86baabc-8586-4008-8187-1d4dbf67e07e")]
	public partial class Temperatue : Sensors
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Temperatue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe86baabc, 0x8586, 0x4008, 0x81, 0x87, 0x1d, 0x4d, 0xbf, 0x67, 0xe0, 0x7e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperatue(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Temperatue(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xb47f8a3b, 0xbc66, 0x4251, 0x8a, 0xcb, 0x09, 0x87, 0xb1, 0x99, 0x34, 0x1c);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.String scalePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Scale.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Scale.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b47f8a3b-bc66-4251-8acb-0987b199341c")]
		public global::System.String Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Temperatue.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<Temperatue, global::System.String>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Temperatue.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Temperatue.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Temperatue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Temperatue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc69e079b, 0x6a16, 0x4092, 0xb6, 0x4e, 0xdb, 0x85, 0x36, 0x8f, 0xd6, 0xbb);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c69e079b-6a16-4092-b64e-db85368fd6bb")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Temperatue.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Temperatue, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Temperatue.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Temperatue.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Temperatue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Temperatue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0xc65c63c1, 0x0417, 0x4a0b, 0x84, 0x45, 0x7c, 0xb6, 0x4e, 0x7d, 0x3b, 0x13);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.Int16 pinPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c65c63c1-0417-4a0b-8445-7cb64e7d3b13")]
		public global::System.Int16 Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Temperatue.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<Temperatue, global::System.Int16>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Temperatue.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Temperatue.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Temperatue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Temperatue element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Mode domain property code
		
		/// <summary>
		/// Mode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModeDomainPropertyId = new global::System.Guid(0x7eeae94d, 0x1dd8, 0x4fab, 0xab, 0x3e, 0x06, 0x7f, 0x18, 0x1a, 0xeb, 0x62);
		
		/// <summary>
		/// Storage for Mode
		/// </summary>
		private global::System.String modePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Mode domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue.Mode
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Mode.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Temperatue/Mode.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7eeae94d-1dd8-4fab-ab3e-067f181aeb62")]
		public global::System.String Mode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Temperatue.Mode domain property.
		/// </summary>
		internal sealed partial class ModePropertyHandler : DslModeling::DomainPropertyValueHandler<Temperatue, global::System.String>
		{
			private ModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Temperatue.Mode domain property value handler.
			/// </summary>
			public static readonly ModePropertyHandler Instance = new ModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Temperatue.Mode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Temperatue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Temperatue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Contoller
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Contoller
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Contoller.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Contoller.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a2f4430b-ae86-4086-befb-0441a64943c9")]
	public partial class Contoller : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Contoller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2f4430b, 0xae86, 0x4086, 0xbe, 0xfb, 0x04, 0x41, 0xa6, 0x49, 0x43, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Contoller(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Contoller(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTModel.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.Contoller
		/// </summary>
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.ContollerDomainRoleId) as IoTModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasContoller.ContollerDomainRoleId, value);
			}
		}
		#endregion
		#region Arduino opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Arduino.
		/// Description for
		/// UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.Contoller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Arduino> Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesContoller.ContollerDomainRoleId);
			}
		}
		#endregion
		#region IO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IO.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.Contoller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IO> IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.ContollerDomainRoleId);
			}
		}
		#endregion
		#region If opposite domain role accessor
		
		/// <summary>
		/// Gets a list of If.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.Contoller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<If> If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<If>, If>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.ContollerDomainRoleId);
			}
		}
		#endregion
		#region Delay opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Delay.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.Contoller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Delay> Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Delay>, Delay>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.ContollerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.IO.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.If.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.IO sourceIO1 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.IO;
			if (sourceIO1 != null)
			{
				// Create link for path ContollerHasIO.IO
				this.IO.Add(sourceIO1);

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.If sourceIf2 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.If;
			if (sourceIf2 != null)
			{
				// Create link for path ContollerHasIf.If
				this.If.Add(sourceIf2);

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay sourceDelay3 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay;
			if (sourceDelay3 != null)
			{
				// Create link for path ContollerHasDelay.Delay
				this.Delay.Add(sourceDelay3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.IO sourceIO1 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.IO;
			if (sourceIO1 != null)
			{
				// Delete link for path ContollerHasIO.IO
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller)this, sourceIO1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.ContollerDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IODomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.If sourceIf2 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.If;
			if (sourceIf2 != null)
			{
				// Delete link for path ContollerHasIf.If
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller)this, sourceIf2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.ContollerDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.IfDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay sourceDelay3 = sourceElement as global::UPM_IPS.JPBSDSJDFProyectoIPS.Delay;
			if (sourceDelay3 != null)
			{
				// Delete link for path ContollerHasDelay.Delay
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.GetLinks((global::UPM_IPS.JPBSDSJDFProyectoIPS.Contoller)this, sourceDelay3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.ContollerDomainRoleId, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.DelayDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Infrared
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Infrared
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a6eabfb8-8a74-41ff-8b9b-056a979b0596")]
	public partial class Infrared : Sensors
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Infrared domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6eabfb8, 0x8a74, 0x41ff, 0x8b, 0x9b, 0x05, 0x6a, 0x97, 0x9b, 0x05, 0x96);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Infrared(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Infrared(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa53e321d, 0x136d, 0x41bb, 0x9a, 0x0a, 0x1d, 0x2a, 0x8f, 0x4e, 0xd8, 0x26);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Infrared.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a53e321d-136d-41bb-9a0a-1d2a8f4ed826")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Infrared.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Infrared, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Infrared.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Infrared.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Infrared element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Infrared element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0xc3df58c4, 0x86b4, 0x4312, 0xb6, 0xbd, 0xb6, 0x8c, 0x76, 0xfb, 0x56, 0x1c);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.String pinPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Infrared.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c3df58c4-86b4-4312-b6bd-b68c76fb561c")]
		public global::System.String Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Infrared.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<Infrared, global::System.String>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Infrared.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Infrared.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Infrared element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Infrared element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Mode domain property code
		
		/// <summary>
		/// Mode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModeDomainPropertyId = new global::System.Guid(0x72f9ee11, 0x549c, 0x46d0, 0x9e, 0xd7, 0xeb, 0xa6, 0xf8, 0x35, 0xb3, 0x32);
		
		/// <summary>
		/// Storage for Mode
		/// </summary>
		private global::System.String modePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Mode domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Infrared.Mode
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Mode.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Infrared/Mode.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("72f9ee11-549c-46d0-9ed7-eba6f835b332")]
		public global::System.String Mode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Infrared.Mode domain property.
		/// </summary>
		internal sealed partial class ModePropertyHandler : DslModeling::DomainPropertyValueHandler<Infrared, global::System.String>
		{
			private ModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Infrared.Mode domain property value handler.
			/// </summary>
			public static readonly ModePropertyHandler Instance = new ModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Infrared.Mode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Infrared element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Infrared element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass LightSensor
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("91bc9674-06f2-4256-a4b2-260fd9211d7f")]
	public partial class LightSensor : Sensors
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LightSensor domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91bc9674, 0x06f2, 0x4256, 0xa4, 0xb2, 0x26, 0x0f, 0xd9, 0x21, 0x1d, 0x7f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LightSensor(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LightSensor(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x339755e3, 0x21ee, 0x4686, 0x9f, 0x8a, 0x5b, 0x2a, 0xce, 0x9e, 0xa5, 0x48);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("339755e3-21ee-4686-9f8a-5b2ace9ea548")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LightSensor.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<LightSensor, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LightSensor.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LightSensor.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LightSensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LightSensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0xa13de67c, 0xfa2f, 0x4710, 0x8a, 0xe3, 0x04, 0x6d, 0x09, 0xa6, 0x20, 0x5d);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.String pinPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a13de67c-fa2f-4710-8ae3-046d09a6205d")]
		public global::System.String Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LightSensor.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<LightSensor, global::System.String>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LightSensor.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LightSensor.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LightSensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LightSensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Mode domain property code
		
		/// <summary>
		/// Mode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModeDomainPropertyId = new global::System.Guid(0xa781a567, 0x81e8, 0x477c, 0xa2, 0xa5, 0x1c, 0xcc, 0x6b, 0x23, 0x13, 0x94);
		
		/// <summary>
		/// Storage for Mode
		/// </summary>
		private global::System.String modePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Mode domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor.Mode
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Mode.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LightSensor/Mode.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a781a567-81e8-477c-a2a5-1ccc6b231394")]
		public global::System.String Mode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LightSensor.Mode domain property.
		/// </summary>
		internal sealed partial class ModePropertyHandler : DslModeling::DomainPropertyValueHandler<LightSensor, global::System.String>
		{
			private ModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LightSensor.Mode domain property value handler.
			/// </summary>
			public static readonly ModePropertyHandler Instance = new ModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LightSensor.Mode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LightSensor element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LightSensor element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Actuators
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Actuators
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Actuators.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Actuators.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9dfaff70-d6c8-43ad-b7c3-0dcb5c3416fc")]
	public abstract partial class Actuators : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Actuators domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9dfaff70, 0xd6c8, 0x43ad, 0xb7, 0xc3, 0x0d, 0xcb, 0x5c, 0x34, 0x16, 0xfc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Actuators(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IoTModel opposite domain role accessor
		/// <summary>
		/// Gets or sets IoTModel.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.Actuators
		/// </summary>
		public virtual IoTModel IoTModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.ActuatorsDomainRoleId) as IoTModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IoTModelHasActuators.ActuatorsDomainRoleId, value);
			}
		}
		#endregion
		#region Arduino opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Arduino.
		/// Description for
		/// UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.Actuators
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Arduino> Arduino
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Arduino>, Arduino>(global::UPM_IPS.JPBSDSJDFProyectoIPS.ArduinoReferencesActuators.ActuatorsDomainRoleId);
			}
		}
		#endregion
		#region IO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IO.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.Actuators
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IO> IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.ActuatorsDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass LedActuator
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eaf0c538-d9d1-470b-a2ed-fcef7dad3273")]
	public partial class LedActuator : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LedActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeaf0c538, 0xd9d1, 0x470b, 0xa2, 0xed, 0xfc, 0xef, 0x7d, 0xad, 0x32, 0x73);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LedActuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LedActuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Mode domain property code
		
		/// <summary>
		/// Mode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModeDomainPropertyId = new global::System.Guid(0x3dcfa433, 0x38a7, 0x4f87, 0xb4, 0x3e, 0x2e, 0xc1, 0x18, 0x35, 0x76, 0x22);
		
		/// <summary>
		/// Storage for Mode
		/// </summary>
		private global::System.String modePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Mode domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator.Mode
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Mode.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Mode.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3dcfa433-38a7-4f87-b43e-2ec118357622")]
		public global::System.String Mode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LedActuator.Mode domain property.
		/// </summary>
		internal sealed partial class ModePropertyHandler : DslModeling::DomainPropertyValueHandler<LedActuator, global::System.String>
		{
			private ModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LedActuator.Mode domain property value handler.
			/// </summary>
			public static readonly ModePropertyHandler Instance = new ModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LedActuator.Mode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LedActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LedActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3f8056e9, 0xac0e, 0x4fa2, 0x91, 0x2c, 0x5d, 0x80, 0xea, 0x97, 0xcf, 0xae);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3f8056e9-ac0e-4fa2-912c-5d80ea97cfae")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LedActuator.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<LedActuator, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LedActuator.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LedActuator.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LedActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LedActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0x369cc739, 0x9a21, 0x46f9, 0xb8, 0x63, 0x21, 0x01, 0x6d, 0x65, 0xb7, 0x14);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.Int16 pinPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LedActuator/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("369cc739-9a21-46f9-b863-21016d65b714")]
		public global::System.Int16 Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LedActuator.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<LedActuator, global::System.Int16>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LedActuator.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LedActuator.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(LedActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LedActuator element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass LCDActuator
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8115c70a-0aff-4b33-8617-4581d5cc583a")]
	public partial class LCDActuator : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LCDActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8115c70a, 0x0aff, 0x4b33, 0x86, 0x17, 0x45, 0x81, 0xd5, 0xcc, 0x58, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LCDActuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LCDActuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Row domain property code
		
		/// <summary>
		/// Row domain property Id.
		/// </summary>
		public static readonly global::System.Guid RowDomainPropertyId = new global::System.Guid(0xd34311a0, 0x8545, 0x408d, 0xa1, 0xe0, 0xf8, 0x34, 0x09, 0x74, 0x02, 0x28);
		
		/// <summary>
		/// Storage for Row
		/// </summary>
		private global::System.String rowPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Row domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Row
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Row.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Row.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d34311a0-8545-408d-a1e0-f83409740228")]
		public global::System.String Row
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rowPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RowPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Row domain property.
		/// </summary>
		internal sealed partial class RowPropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private RowPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Row domain property value handler.
			/// </summary>
			public static readonly RowPropertyHandler Instance = new RowPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Row domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RowDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rowPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rowPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Column domain property code
		
		/// <summary>
		/// Column domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnDomainPropertyId = new global::System.Guid(0x18973309, 0x2597, 0x4438, 0x84, 0xca, 0x81, 0xce, 0xdc, 0xb1, 0x79, 0xb7);
		
		/// <summary>
		/// Storage for Column
		/// </summary>
		private global::System.String columnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Column domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Column
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Column.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Column.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("18973309-2597-4438-84ca-81cedcb179b7")]
		public global::System.String Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Column domain property.
		/// </summary>
		internal sealed partial class ColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private ColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Column domain property value handler.
			/// </summary>
			public static readonly ColumnPropertyHandler Instance = new ColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Column domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd56e10c7, 0x6a9f, 0x41c0, 0xa6, 0x12, 0xde, 0x0c, 0xd3, 0xbf, 0x46, 0xe3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d56e10c7-6a9f-41c0-a612-de0cd3bf46e3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x9873acca, 0x2fc2, 0x4951, 0x9b, 0x1d, 0x3d, 0xe2, 0x5b, 0xbf, 0x84, 0x6b);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Text
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Text.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Text.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9873acca-2fc2-4951-9b1d-3de25bbf846b")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin1 domain property code
		
		/// <summary>
		/// Pin1 domain property Id.
		/// </summary>
		public static readonly global::System.Guid Pin1DomainPropertyId = new global::System.Guid(0x7c3fc7f0, 0x19b1, 0x4ab5, 0xa1, 0x86, 0xb7, 0x73, 0xdc, 0x70, 0x47, 0xb9);
		
		/// <summary>
		/// Storage for Pin1
		/// </summary>
		private global::System.String pin1PropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin1 domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Pin1
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin1.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin1.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c3fc7f0-19b1-4ab5-a186-b773dc7047b9")]
		public global::System.String Pin1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pin1PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				Pin1PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Pin1 domain property.
		/// </summary>
		internal sealed partial class Pin1PropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private Pin1PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Pin1 domain property value handler.
			/// </summary>
			public static readonly Pin1PropertyHandler Instance = new Pin1PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Pin1 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return Pin1DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pin1PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pin1PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin2 domain property code
		
		/// <summary>
		/// Pin2 domain property Id.
		/// </summary>
		public static readonly global::System.Guid Pin2DomainPropertyId = new global::System.Guid(0x6a6d8a29, 0x2983, 0x4e8a, 0xb0, 0xe5, 0x06, 0x29, 0x61, 0xb5, 0x52, 0xed);
		
		/// <summary>
		/// Storage for Pin2
		/// </summary>
		private global::System.String pin2PropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin2 domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Pin2
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin2.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin2.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6a6d8a29-2983-4e8a-b0e5-062961b552ed")]
		public global::System.String Pin2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pin2PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				Pin2PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Pin2 domain property.
		/// </summary>
		internal sealed partial class Pin2PropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private Pin2PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Pin2 domain property value handler.
			/// </summary>
			public static readonly Pin2PropertyHandler Instance = new Pin2PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Pin2 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return Pin2DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pin2PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pin2PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin3 domain property code
		
		/// <summary>
		/// Pin3 domain property Id.
		/// </summary>
		public static readonly global::System.Guid Pin3DomainPropertyId = new global::System.Guid(0xf15f8ed2, 0x1eaf, 0x489f, 0x94, 0x10, 0xf8, 0x4c, 0xaf, 0x06, 0x52, 0xa6);
		
		/// <summary>
		/// Storage for Pin3
		/// </summary>
		private global::System.String pin3PropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin3 domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator.Pin3
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin3.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.LCDActuator/Pin3.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f15f8ed2-1eaf-489f-9410-f84caf0652a6")]
		public global::System.String Pin3
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pin3PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				Pin3PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LCDActuator.Pin3 domain property.
		/// </summary>
		internal sealed partial class Pin3PropertyHandler : DslModeling::DomainPropertyValueHandler<LCDActuator, global::System.String>
		{
			private Pin3PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LCDActuator.Pin3 domain property value handler.
			/// </summary>
			public static readonly Pin3PropertyHandler Instance = new Pin3PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LCDActuator.Pin3 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return Pin3DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(LCDActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pin3PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LCDActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pin3PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass BuzzerActuator
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Frequency = {frequencyPropertyStorage})")]
	[DslModeling::DomainObjectId("d6becd97-5622-465b-83ef-846091dfd7c8")]
	public partial class BuzzerActuator : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BuzzerActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6becd97, 0x5622, 0x465b, 0x83, 0xef, 0x84, 0x60, 0x91, 0xdf, 0xd7, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BuzzerActuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BuzzerActuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Frequency domain property code
		
		/// <summary>
		/// Frequency domain property Id.
		/// </summary>
		public static readonly global::System.Guid FrequencyDomainPropertyId = new global::System.Guid(0x83ef8a63, 0x5c28, 0x49ac, 0x99, 0xfc, 0x57, 0xc4, 0xdd, 0x76, 0x61, 0x75);
		
		/// <summary>
		/// Storage for Frequency
		/// </summary>
		private global::System.String frequencyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Frequency domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Frequency
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Frequency.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Frequency.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("83ef8a63-5c28-49ac-99fc-57c4dd766175")]
		public global::System.String Frequency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return frequencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FrequencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuzzerActuator.Frequency domain property.
		/// </summary>
		internal sealed partial class FrequencyPropertyHandler : DslModeling::DomainPropertyValueHandler<BuzzerActuator, global::System.String>
		{
			private FrequencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuzzerActuator.Frequency domain property value handler.
			/// </summary>
			public static readonly FrequencyPropertyHandler Instance = new FrequencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuzzerActuator.Frequency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FrequencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuzzerActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.frequencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuzzerActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.frequencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Duration domain property code
		
		/// <summary>
		/// Duration domain property Id.
		/// </summary>
		public static readonly global::System.Guid DurationDomainPropertyId = new global::System.Guid(0xbb967e70, 0x9a79, 0x42be, 0xa3, 0x3f, 0xac, 0x7f, 0x01, 0x71, 0x66, 0x12);
		
		/// <summary>
		/// Storage for Duration
		/// </summary>
		private global::System.String durationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Duration domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Duration
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Duration.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Duration.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bb967e70-9a79-42be-a33f-ac7f01716612")]
		public global::System.String Duration
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return durationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DurationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuzzerActuator.Duration domain property.
		/// </summary>
		internal sealed partial class DurationPropertyHandler : DslModeling::DomainPropertyValueHandler<BuzzerActuator, global::System.String>
		{
			private DurationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuzzerActuator.Duration domain property value handler.
			/// </summary>
			public static readonly DurationPropertyHandler Instance = new DurationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuzzerActuator.Duration domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DurationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuzzerActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.durationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuzzerActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.durationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x51909beb, 0xf4e4, 0x42be, 0xb3, 0x6d, 0x54, 0xbb, 0x73, 0x4a, 0xe8, 0xcf);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("51909beb-f4e4-42be-b36d-54bb734ae8cf")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuzzerActuator.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<BuzzerActuator, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuzzerActuator.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuzzerActuator.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuzzerActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuzzerActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0xd57fe355, 0x22c8, 0x454d, 0xba, 0xc6, 0x57, 0xc6, 0x11, 0xc2, 0x18, 0x1a);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.String pinPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d57fe355-22c8-454d-bac6-57c611c2181a")]
		public global::System.String Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuzzerActuator.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<BuzzerActuator, global::System.String>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuzzerActuator.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuzzerActuator.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuzzerActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuzzerActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Mode domain property code
		
		/// <summary>
		/// Mode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModeDomainPropertyId = new global::System.Guid(0x9c9aa036, 0x5c7a, 0x4979, 0xad, 0xe4, 0xab, 0x66, 0x83, 0x3c, 0x3b, 0x06);
		
		/// <summary>
		/// Storage for Mode
		/// </summary>
		private global::System.String modePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Mode domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator.Mode
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Mode.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.BuzzerActuator/Mode.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c9aa036-5c7a-4979-ade4-ab66833c3b06")]
		public global::System.String Mode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BuzzerActuator.Mode domain property.
		/// </summary>
		internal sealed partial class ModePropertyHandler : DslModeling::DomainPropertyValueHandler<BuzzerActuator, global::System.String>
		{
			private ModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BuzzerActuator.Mode domain property value handler.
			/// </summary>
			public static readonly ModePropertyHandler Instance = new ModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BuzzerActuator.Mode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BuzzerActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BuzzerActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass DCMotorActuator
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Speed = {speedPropertyStorage})")]
	[DslModeling::DomainObjectId("1dd04f3e-7c74-4a91-a1c8-2ae0c4e7ab34")]
	public partial class DCMotorActuator : Actuators
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DCMotorActuator domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1dd04f3e, 0x7c74, 0x4a91, 0xa1, 0xc8, 0x2a, 0xe0, 0xc4, 0xe7, 0xab, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DCMotorActuator(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DCMotorActuator(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Speed domain property code
		
		/// <summary>
		/// Speed domain property Id.
		/// </summary>
		public static readonly global::System.Guid SpeedDomainPropertyId = new global::System.Guid(0xf2132c7d, 0xf572, 0x4d2e, 0x92, 0x68, 0x98, 0x76, 0x5a, 0xce, 0x61, 0x16);
		
		/// <summary>
		/// Storage for Speed
		/// </summary>
		private global::System.String speedPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Speed domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator.Speed
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Speed.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Speed.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f2132c7d-f572-4d2e-9268-98765ace6116")]
		public global::System.String Speed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return speedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SpeedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DCMotorActuator.Speed domain property.
		/// </summary>
		internal sealed partial class SpeedPropertyHandler : DslModeling::DomainPropertyValueHandler<DCMotorActuator, global::System.String>
		{
			private SpeedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DCMotorActuator.Speed domain property value handler.
			/// </summary>
			public static readonly SpeedPropertyHandler Instance = new SpeedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DCMotorActuator.Speed domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SpeedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DCMotorActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.speedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DCMotorActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.speedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd6bd2fac, 0xb5c0, 0x4844, 0x8f, 0x8e, 0x46, 0x6f, 0xfe, 0x4b, 0xb7, 0x14);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Name.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Name.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d6bd2fac-b5c0-4844-8f8e-466ffe4bb714")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DCMotorActuator.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DCMotorActuator, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DCMotorActuator.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DCMotorActuator.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DCMotorActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DCMotorActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Pin domain property code
		
		/// <summary>
		/// Pin domain property Id.
		/// </summary>
		public static readonly global::System.Guid PinDomainPropertyId = new global::System.Guid(0x5dcc019c, 0xe1b0, 0x419b, 0x97, 0x73, 0x46, 0xa6, 0x16, 0xbd, 0x89, 0x7a);
		
		/// <summary>
		/// Storage for Pin
		/// </summary>
		private global::System.String pinPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Pin domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator.Pin
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Pin.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.DCMotorActuator/Pin.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5dcc019c-e1b0-419b-9773-46a616bd897a")]
		public global::System.String Pin
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pinPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PinPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DCMotorActuator.Pin domain property.
		/// </summary>
		internal sealed partial class PinPropertyHandler : DslModeling::DomainPropertyValueHandler<DCMotorActuator, global::System.String>
		{
			private PinPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DCMotorActuator.Pin domain property value handler.
			/// </summary>
			public static readonly PinPropertyHandler Instance = new PinPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DCMotorActuator.Pin domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PinDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DCMotorActuator element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pinPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DCMotorActuator element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pinPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass IO
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f1be9c8a-7040-47a1-892b-bfb928975753")]
	public partial class IO : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IO domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1be9c8a, 0x7040, 0x47a1, 0x89, 0x2b, 0xbf, 0xb9, 0x28, 0x97, 0x57, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IO(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IO(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x237f3fa6, 0x81ed, 0x478e, 0x84, 0x59, 0x2b, 0x73, 0xf7, 0x9f, 0xbc, 0x20);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private EType typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO.Type
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/Type.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/Type.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("237f3fa6-81ed-478e-8459-2b73f79fbc20")]
		public EType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IO.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<IO, EType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IO.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IO.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EType GetValue(IO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IO element, EType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameActOSen domain property code
		
		/// <summary>
		/// NameActOSen domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameActOSenDomainPropertyId = new global::System.Guid(0xae25e78d, 0x36f4, 0x49fb, 0xa7, 0xcb, 0x7c, 0x0e, 0x8b, 0xde, 0x52, 0x61);
		
		/// <summary>
		/// Storage for NameActOSen
		/// </summary>
		private global::System.String nameActOSenPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NameActOSen domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO.Name Act OSen
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/NameActOSen.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/NameActOSen.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ae25e78d-36f4-49fb-a7cb-7c0e8bde5261")]
		public global::System.String NameActOSen
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nameActOSenPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameActOSenPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IO.NameActOSen domain property.
		/// </summary>
		internal sealed partial class NameActOSenPropertyHandler : DslModeling::DomainPropertyValueHandler<IO, global::System.String>
		{
			private NameActOSenPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IO.NameActOSen domain property value handler.
			/// </summary>
			public static readonly NameActOSenPropertyHandler Instance = new NameActOSenPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IO.NameActOSen domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameActOSenDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nameActOSenPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IO element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nameActOSenPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0x3e90b63d, 0x0b72, 0x4c8c, 0x82, 0xcb, 0x9d, 0x69, 0x2a, 0xb4, 0x23, 0xa5);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int16 orderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO.Order
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/Order.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/Order.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e90b63d-0b72-4c8c-82cb-9d692ab423a5")]
		public global::System.Int16 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IO.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<IO, global::System.Int16>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IO.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IO.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(IO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IO element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DeviceType domain property code
		
		/// <summary>
		/// DeviceType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DeviceTypeDomainPropertyId = new global::System.Guid(0xa1d5933e, 0xb253, 0x43a9, 0x8e, 0x18, 0x68, 0x5d, 0xca, 0x40, 0xd2, 0xac);
		
		/// <summary>
		/// Storage for DeviceType
		/// </summary>
		private global::System.String deviceTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DeviceType domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO.Device Type
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/DeviceType.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/DeviceType.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a1d5933e-b253-43a9-8e18-685dca40d2ac")]
		public global::System.String DeviceType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deviceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DeviceTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IO.DeviceType domain property.
		/// </summary>
		internal sealed partial class DeviceTypePropertyHandler : DslModeling::DomainPropertyValueHandler<IO, global::System.String>
		{
			private DeviceTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IO.DeviceType domain property value handler.
			/// </summary>
			public static readonly DeviceTypePropertyHandler Instance = new DeviceTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IO.DeviceType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DeviceTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.deviceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IO element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deviceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VarName domain property code
		
		/// <summary>
		/// VarName domain property Id.
		/// </summary>
		public static readonly global::System.Guid VarNameDomainPropertyId = new global::System.Guid(0x3e93b327, 0x2634, 0x43d7, 0x85, 0x99, 0x66, 0xe6, 0xcc, 0xb6, 0x96, 0x81);
		
		/// <summary>
		/// Storage for VarName
		/// </summary>
		private global::System.String varNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VarName domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IO.Var Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/VarName.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.IO/VarName.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e93b327-2634-43d7-8599-66e6ccb69681")]
		public global::System.String VarName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return varNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VarNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IO.VarName domain property.
		/// </summary>
		internal sealed partial class VarNamePropertyHandler : DslModeling::DomainPropertyValueHandler<IO, global::System.String>
		{
			private VarNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IO.VarName domain property value handler.
			/// </summary>
			public static readonly VarNamePropertyHandler Instance = new VarNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IO.VarName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VarNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.varNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IO element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.varNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Contoller opposite domain role accessor
		/// <summary>
		/// Gets or sets Contoller.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IO
		/// </summary>
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IODomainRoleId) as Contoller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIO.IODomainRoleId, value);
			}
		}
		#endregion
		#region If opposite domain role accessor
		/// <summary>
		/// Gets or sets If.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IO
		/// </summary>
		public virtual If If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IODomainRoleId) as If;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IODomainRoleId, value);
			}
		}
		#endregion
		#region Actuators opposite domain role accessor
		/// <summary>
		/// Gets or sets Actuators.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IO
		/// </summary>
		public virtual Actuators Actuators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IODomainRoleId) as Actuators;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesActuators.IODomainRoleId, value);
			}
		}
		#endregion
		#region Sensors opposite domain role accessor
		/// <summary>
		/// Gets or sets Sensors.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IO
		/// </summary>
		public virtual Sensors Sensors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IODomainRoleId) as Sensors;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesSensors.IODomainRoleId, value);
			}
		}
		#endregion
		#region Delay opposite domain role accessor
		/// <summary>
		/// Gets or sets Delay.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IO
		/// </summary>
		public virtual Delay Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IODomainRoleId) as Delay;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.IODomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass If
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("921dc275-c828-420a-9193-89deef1a8da2")]
	public partial class If : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// If domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x921dc275, 0xc828, 0x420a, 0x91, 0x93, 0x89, 0xde, 0xef, 0x1a, 0x8d, 0xa2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public If(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public If(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Operator1 domain property code
		
		/// <summary>
		/// Operator1 domain property Id.
		/// </summary>
		public static readonly global::System.Guid Operator1DomainPropertyId = new global::System.Guid(0xdafb6ef3, 0xcbca, 0x4374, 0xb1, 0xad, 0x83, 0x05, 0xaa, 0x81, 0xc1, 0xf6);
		
		/// <summary>
		/// Storage for Operator1
		/// </summary>
		private global::System.String operator1PropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Operator1 domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If.Operator1
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Operator1.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Operator1.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dafb6ef3-cbca-4374-b1ad-8305aa81c1f6")]
		public global::System.String Operator1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return operator1PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				Operator1PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the If.Operator1 domain property.
		/// </summary>
		internal sealed partial class Operator1PropertyHandler : DslModeling::DomainPropertyValueHandler<If, global::System.String>
		{
			private Operator1PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the If.Operator1 domain property value handler.
			/// </summary>
			public static readonly Operator1PropertyHandler Instance = new Operator1PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the If.Operator1 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return Operator1DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(If element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.operator1PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(If element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.operator1PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Condition domain property code
		
		/// <summary>
		/// Condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainPropertyId = new global::System.Guid(0x0c58b8dc, 0x524e, 0x413e, 0x9c, 0x7c, 0x57, 0xc6, 0x98, 0xbb, 0xaa, 0x3a);
		
		/// <summary>
		/// Storage for Condition
		/// </summary>
		private global::System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Condition domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Condition.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Condition.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0c58b8dc-524e-413e-9c7c-57c698bbaa3a")]
		public global::System.String Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the If.Condition domain property.
		/// </summary>
		internal sealed partial class ConditionPropertyHandler : DslModeling::DomainPropertyValueHandler<If, global::System.String>
		{
			private ConditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the If.Condition domain property value handler.
			/// </summary>
			public static readonly ConditionPropertyHandler Instance = new ConditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the If.Condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(If element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(If element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operator2 domain property code
		
		/// <summary>
		/// Operator2 domain property Id.
		/// </summary>
		public static readonly global::System.Guid Operator2DomainPropertyId = new global::System.Guid(0xef45a57f, 0x0307, 0x4f90, 0x93, 0xc0, 0x51, 0x1d, 0xcc, 0xbb, 0x6c, 0x5e);
		
		/// <summary>
		/// Storage for Operator2
		/// </summary>
		private global::System.String operator2PropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Operator2 domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If.Operator2
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Operator2.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Operator2.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ef45a57f-0307-4f90-93c0-511dccbb6c5e")]
		public global::System.String Operator2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return operator2PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				Operator2PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the If.Operator2 domain property.
		/// </summary>
		internal sealed partial class Operator2PropertyHandler : DslModeling::DomainPropertyValueHandler<If, global::System.String>
		{
			private Operator2PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the If.Operator2 domain property value handler.
			/// </summary>
			public static readonly Operator2PropertyHandler Instance = new Operator2PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the If.Operator2 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return Operator2DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(If element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.operator2PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(If element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.operator2PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0x886b803c, 0x1332, 0x4ec4, 0xa8, 0xe7, 0xc9, 0x13, 0xd5, 0x4d, 0x35, 0x38);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int16 orderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If.Order
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Order.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/Order.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("886b803c-1332-4ec4-a8e7-c913d54d3538")]
		public global::System.Int16 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the If.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<If, global::System.Int16>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the If.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the If.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(If element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(If element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FinalOrder domain property code
		
		/// <summary>
		/// FinalOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid FinalOrderDomainPropertyId = new global::System.Guid(0xde2f90a6, 0x1702, 0x472d, 0xbf, 0x1f, 0xe0, 0x42, 0x3e, 0xbd, 0x78, 0xaf);
		
		/// <summary>
		/// Storage for FinalOrder
		/// </summary>
		private global::System.Int16 finalOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FinalOrder domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.If.Final Order
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/FinalOrder.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.If/FinalOrder.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("de2f90a6-1702-472d-bf1f-e0423ebd78af")]
		public global::System.Int16 FinalOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return finalOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FinalOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the If.FinalOrder domain property.
		/// </summary>
		internal sealed partial class FinalOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<If, global::System.Int16>
		{
			private FinalOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the If.FinalOrder domain property value handler.
			/// </summary>
			public static readonly FinalOrderPropertyHandler Instance = new FinalOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the If.FinalOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FinalOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(If element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.finalOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(If element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.finalOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Contoller opposite domain role accessor
		/// <summary>
		/// Gets or sets Contoller.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.If
		/// </summary>
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.IfDomainRoleId) as Contoller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasIf.IfDomainRoleId, value);
			}
		}
		#endregion
		#region IO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IO.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.If
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IO> IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesIO.IfDomainRoleId);
			}
		}
		#endregion
		#region Delay opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Delay.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.If
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Delay> Delay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Delay>, Delay>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.IfDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.JPBSDSJDFProyectoIPS
{
	/// <summary>
	/// DomainClass Delay
	/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Delay
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("33282a31-aa86-45b2-a33a-fc09559ffdda")]
	public partial class Delay : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Delay domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33282a31, 0xaa86, 0x45b2, 0xa3, 0x3a, 0xfc, 0x09, 0x55, 0x9f, 0xfd, 0xda);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Delay(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Delay(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region time domain property code
		
		/// <summary>
		/// time domain property Id.
		/// </summary>
		public static readonly global::System.Guid timeDomainPropertyId = new global::System.Guid(0x19015ee3, 0xef14, 0x4cbe, 0xb1, 0xe2, 0xf7, 0x6c, 0xb5, 0x6d, 0x06, 0x9a);
		
		/// <summary>
		/// Storage for time
		/// </summary>
		private global::System.Int16 timePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of time domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Delay.Time
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay/time.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay/time.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("19015ee3-ef14-4cbe-b1e2-f76cb56d069a")]
		public global::System.Int16 time
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return timePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				timePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Delay.time domain property.
		/// </summary>
		internal sealed partial class timePropertyHandler : DslModeling::DomainPropertyValueHandler<Delay, global::System.Int16>
		{
			private timePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Delay.time domain property value handler.
			/// </summary>
			public static readonly timePropertyHandler Instance = new timePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Delay.time domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return timeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Delay element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.timePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Delay element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.timePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Order domain property code
		
		/// <summary>
		/// Order domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderDomainPropertyId = new global::System.Guid(0xf1c9e39f, 0x72ba, 0x479c, 0xab, 0x4b, 0x96, 0x54, 0xbc, 0xb4, 0x50, 0x8a);
		
		/// <summary>
		/// Storage for Order
		/// </summary>
		private global::System.Int16 orderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Order domain property.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.Delay.Order
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay/Order.DisplayName", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.JPBSDSJDFProyectoIPS.Delay/Order.Description", typeof(global::UPM_IPS.JPBSDSJDFProyectoIPS.JPBSDSJDFProyectoIPSDomainModel), "UPM_IPS.JPBSDSJDFProyectoIPS.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f1c9e39f-72ba-479c-ab4b-9654bcb4508a")]
		public global::System.Int16 Order
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Delay.Order domain property.
		/// </summary>
		internal sealed partial class OrderPropertyHandler : DslModeling::DomainPropertyValueHandler<Delay, global::System.Int16>
		{
			private OrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Delay.Order domain property value handler.
			/// </summary>
			public static readonly OrderPropertyHandler Instance = new OrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Delay.Order domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Delay element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Delay element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Contoller opposite domain role accessor
		/// <summary>
		/// Gets or sets Contoller.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.Delay
		/// </summary>
		public virtual Contoller Contoller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.DelayDomainRoleId) as Contoller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.ContollerHasDelay.DelayDomainRoleId, value);
			}
		}
		#endregion
		#region If opposite domain role accessor
		/// <summary>
		/// Gets or sets If.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.Delay
		/// </summary>
		public virtual If If
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.DelayDomainRoleId) as If;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.JPBSDSJDFProyectoIPS.IfReferencesDelay.DelayDomainRoleId, value);
			}
		}
		#endregion
		#region IO opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IO.
		/// Description for UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.Delay
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IO> IO
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IO>, IO>(global::UPM_IPS.JPBSDSJDFProyectoIPS.IOReferencesDelay.DelayDomainRoleId);
			}
		}
		#endregion
	}
}
